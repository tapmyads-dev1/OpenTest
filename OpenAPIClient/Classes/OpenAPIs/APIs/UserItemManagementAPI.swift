//
// UserItemManagementAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class UserItemManagementAPI {

    /**
     Add Virtual Currency to User
     
     - parameter addVirtualCurrencyToUserRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func addVirtualCurrencyToUser(addVirtualCurrencyToUserRequest: AddVirtualCurrencyToUserRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AddVirtualCurrencyToUserResult?, _ error: Error?) -> Void)) -> RequestTask {
        return addVirtualCurrencyToUserWithRequestBuilder(addVirtualCurrencyToUserRequest: addVirtualCurrencyToUserRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add Virtual Currency to User
     - POST /AddVirtualCurrencyToUser
     - Increments the user's balance of the specified virtual currency by the stated amount
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter addVirtualCurrencyToUserRequest: (body)  (optional)
     - returns: RequestBuilder<AddVirtualCurrencyToUserResult> 
     */
    open class func addVirtualCurrencyToUserWithRequestBuilder(addVirtualCurrencyToUserRequest: AddVirtualCurrencyToUserRequest? = nil) -> RequestBuilder<AddVirtualCurrencyToUserResult> {
        let localVariablePath = "/AddVirtualCurrencyToUser"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: addVirtualCurrencyToUserRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AddVirtualCurrencyToUserResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     ConsumeInstance
     
     - parameter consumeInstanceRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func consumeInstance(consumeInstanceRequest: ConsumeInstanceRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ConsumeInstanceResult?, _ error: Error?) -> Void)) -> RequestTask {
        return consumeInstanceWithRequestBuilder(consumeInstanceRequest: consumeInstanceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     ConsumeInstance
     - POST /ConsumeInstance
     - Consume uses of a consumable item. When all uses are consumed, it will be removed from the user's inventory.
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter consumeInstanceRequest: (body)  (optional)
     - returns: RequestBuilder<ConsumeInstanceResult> 
     */
    open class func consumeInstanceWithRequestBuilder(consumeInstanceRequest: ConsumeInstanceRequest? = nil) -> RequestBuilder<ConsumeInstanceResult> {
        let localVariablePath = "/ConsumeInstance"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: consumeInstanceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConsumeInstanceResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get User Inventory
     
     - parameter userID: (query) Unique AvatarYug identifier of the user whose info is being requested. Optional, defaults to the authenticated user if no other lookup identifier set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserInventory(userID: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetUserInventoryResult?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserInventoryWithRequestBuilder(userID: userID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get User Inventory
     - GET /GetUserInventory
     - Retrieves the user's current inventory of virtual goods
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter userID: (query) Unique AvatarYug identifier of the user whose info is being requested. Optional, defaults to the authenticated user if no other lookup identifier set. (optional)
     - returns: RequestBuilder<GetUserInventoryResult> 
     */
    open class func getUserInventoryWithRequestBuilder(userID: String? = nil) -> RequestBuilder<GetUserInventoryResult> {
        let localVariablePath = "/GetUserInventory"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "UserID": (wrappedValue: userID?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetUserInventoryResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Grant Items To User
     
     - parameter grantInstanceToUserRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func grantInstanceToUser(grantInstanceToUserRequest: GrantInstanceToUserRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GrantInstanceToUserResult?, _ error: Error?) -> Void)) -> RequestTask {
        return grantInstanceToUserWithRequestBuilder(grantInstanceToUserRequest: grantInstanceToUserRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Grant Items To User
     - POST /GrantInstanceToUser
     - Adds the specified items to the specified user's inventory
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter grantInstanceToUserRequest: (body)  (optional)
     - returns: RequestBuilder<GrantInstanceToUserResult> 
     */
    open class func grantInstanceToUserWithRequestBuilder(grantInstanceToUserRequest: GrantInstanceToUserRequest? = nil) -> RequestBuilder<GrantInstanceToUserResult> {
        let localVariablePath = "/GrantInstanceToUser"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: grantInstanceToUserRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GrantInstanceToUserResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Purchase Instance
     
     - parameter purchaseInstanceRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func purchaseInstance(purchaseInstanceRequest: PurchaseInstanceRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return purchaseInstanceWithRequestBuilder(purchaseInstanceRequest: purchaseInstanceRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Purchase Instance
     - POST /PurchaseInstance
     - Buys a single item with virtual currency. You must specify both the virtual currency to use to purchase, as well as what the client believes the price to be. This lets the server fail the purchase if the price has changed.
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter purchaseInstanceRequest: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func purchaseInstanceWithRequestBuilder(purchaseInstanceRequest: PurchaseInstanceRequest? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/PurchaseInstance"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: purchaseInstanceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Subtract User Virtual Currency
     
     - parameter subtractUserVirtualCurrencyRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func subtractUserVirtualCurrency(subtractUserVirtualCurrencyRequest: SubtractUserVirtualCurrencyRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return subtractUserVirtualCurrencyWithRequestBuilder(subtractUserVirtualCurrencyRequest: subtractUserVirtualCurrencyRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Subtract User Virtual Currency
     - POST /SubtractUserVirtualCurrency
     - Decrements the user's balance of the specified virtual currency by the stated amount. It is possible to make a VC balance negative with this API.
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter subtractUserVirtualCurrencyRequest: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func subtractUserVirtualCurrencyWithRequestBuilder(subtractUserVirtualCurrencyRequest: SubtractUserVirtualCurrencyRequest? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/SubtractUserVirtualCurrency"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: subtractUserVirtualCurrencyRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
