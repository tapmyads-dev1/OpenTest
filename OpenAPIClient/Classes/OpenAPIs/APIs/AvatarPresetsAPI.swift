//
// AvatarPresetsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AvatarPresetsAPI {

    /**
     Get Avatar Presets
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAvatarPresets(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetAvatarPresetsResult?, _ error: Error?) -> Void)) -> RequestTask {
        return getAvatarPresetsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Avatar Presets
     - GET /GetAvatarPresets
     - Get all avatar presets
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<GetAvatarPresetsResult> 
     */
    open class func getAvatarPresetsWithRequestBuilder() -> RequestBuilder<GetAvatarPresetsResult> {
        let localVariablePath = "/GetAvatarPresets"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetAvatarPresetsResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get AvatarPresets By ID
     
     - parameter avatarPresetID: (query) Unique Identifier for the Avatar Preset which is being requested 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAvatarPresetsByID(avatarPresetID: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetAvatarPresetByID200?, _ error: Error?) -> Void)) -> RequestTask {
        return getAvatarPresetsByIDWithRequestBuilder(avatarPresetID: avatarPresetID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get AvatarPresets By ID
     - GET /GetAvatarPresetsByID
     - Retrive Avatar preset by ID
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter avatarPresetID: (query) Unique Identifier for the Avatar Preset which is being requested 
     - returns: RequestBuilder<GetAvatarPresetByID200> 
     */
    open class func getAvatarPresetsByIDWithRequestBuilder(avatarPresetID: String) -> RequestBuilder<GetAvatarPresetByID200> {
        let localVariablePath = "/GetAvatarPresetsByID"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "AvatarPresetID": (wrappedValue: avatarPresetID.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetAvatarPresetByID200>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Grant AvatarPreset To User
     
     - parameter grantAvatarToUserRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func grantAvatarToUser(grantAvatarToUserRequest: GrantAvatarToUserRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GrantAvatarToUserResult?, _ error: Error?) -> Void)) -> RequestTask {
        return grantAvatarToUserWithRequestBuilder(grantAvatarToUserRequest: grantAvatarToUserRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Grant AvatarPreset To User
     - POST /GrantAvatarToUser
     - Grants the specified Avatar to the user
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter grantAvatarToUserRequest: (body)  (optional)
     - returns: RequestBuilder<GrantAvatarToUserResult> 
     */
    open class func grantAvatarToUserWithRequestBuilder(grantAvatarToUserRequest: GrantAvatarToUserRequest? = nil) -> RequestBuilder<GrantAvatarToUserResult> {
        let localVariablePath = "/GrantAvatarToUser"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: grantAvatarToUserRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GrantAvatarToUserResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
