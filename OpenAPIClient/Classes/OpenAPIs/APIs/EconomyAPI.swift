//
// EconomyAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class EconomyAPI {

    /**
     Get Economy Bundles by ID
     
     - parameter bundleID: (query) Unqiue identifier for the bundle which is being requested. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getEconomyBundleByID(bundleID: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetEconomyBundleByIDResult?, _ error: Error?) -> Void)) -> RequestTask {
        return getEconomyBundleByIDWithRequestBuilder(bundleID: bundleID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Economy Bundles by ID
     - GET /GetEconomyBundleByID
     - Get Economy Bundles by ID
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter bundleID: (query) Unqiue identifier for the bundle which is being requested. 
     - returns: RequestBuilder<GetEconomyBundleByIDResult> 
     */
    open class func getEconomyBundleByIDWithRequestBuilder(bundleID: String) -> RequestBuilder<GetEconomyBundleByIDResult> {
        let localVariablePath = "/GetEconomyBundleByID"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "BundleID": (wrappedValue: bundleID.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetEconomyBundleByIDResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Economy Bundles
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getEconomyBundles(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetEconomyBundlesResult?, _ error: Error?) -> Void)) -> RequestTask {
        return getEconomyBundlesWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Economy Bundles
     - GET /GetEconomyBundles
     - Get Economy Bundles
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<GetEconomyBundlesResult> 
     */
    open class func getEconomyBundlesWithRequestBuilder() -> RequestBuilder<GetEconomyBundlesResult> {
        let localVariablePath = "/GetEconomyBundles"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetEconomyBundlesResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Economy Container by ID
     
     - parameter containerID: (query) Unqiue identifier for the container which is being requested. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getEconomyContainerByID(containerID: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetEconomyContainerByIDResult?, _ error: Error?) -> Void)) -> RequestTask {
        return getEconomyContainerByIDWithRequestBuilder(containerID: containerID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Economy Container by ID
     - GET /GetEconomyContainerByID
     - Get Economy Container by ID
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter containerID: (query) Unqiue identifier for the container which is being requested. 
     - returns: RequestBuilder<GetEconomyContainerByIDResult> 
     */
    open class func getEconomyContainerByIDWithRequestBuilder(containerID: String) -> RequestBuilder<GetEconomyContainerByIDResult> {
        let localVariablePath = "/GetEconomyContainerByID"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ContainerID": (wrappedValue: containerID.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetEconomyContainerByIDResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Economy Containers
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getEconomyContainers(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [GetEconomyContainersResultInner]?, _ error: Error?) -> Void)) -> RequestTask {
        return getEconomyContainersWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Economy Containers
     - GET /GetEconomyContainers
     - Get Economy Containers
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<[GetEconomyContainersResultInner]> 
     */
    open class func getEconomyContainersWithRequestBuilder() -> RequestBuilder<[GetEconomyContainersResultInner]> {
        let localVariablePath = "/GetEconomyContainers"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[GetEconomyContainersResultInner]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Economy Items
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getEconomyItems(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetEconomyItemsResult?, _ error: Error?) -> Void)) -> RequestTask {
        return getEconomyItemsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Economy Items
     - GET /GetEconomyItems
     - Get Economy Items
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<GetEconomyItemsResult> 
     */
    open class func getEconomyItemsWithRequestBuilder() -> RequestBuilder<GetEconomyItemsResult> {
        let localVariablePath = "/GetEconomyItems"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetEconomyItemsResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Economy Item by ID
     
     - parameter itemID: (query) Unqiue identifier for the item which is being requested. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getEconomyItemsByID(itemID: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetEconomyItemsByIDResult?, _ error: Error?) -> Void)) -> RequestTask {
        return getEconomyItemsByIDWithRequestBuilder(itemID: itemID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Economy Item by ID
     - GET /GetEconomyItemsByID
     - Get Economy Item by ID
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter itemID: (query) Unqiue identifier for the item which is being requested. 
     - returns: RequestBuilder<GetEconomyItemsByIDResult> 
     */
    open class func getEconomyItemsByIDWithRequestBuilder(itemID: String) -> RequestBuilder<GetEconomyItemsByIDResult> {
        let localVariablePath = "/GetEconomyItemsByID"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ItemID": (wrappedValue: itemID.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetEconomyItemsByIDResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Economy Stores
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getEconomyStores(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetEconomyStoresResult?, _ error: Error?) -> Void)) -> RequestTask {
        return getEconomyStoresWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Economy Stores
     - GET /GetEconomyStores
     - Get Economy Stores
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<GetEconomyStoresResult> 
     */
    open class func getEconomyStoresWithRequestBuilder() -> RequestBuilder<GetEconomyStoresResult> {
        let localVariablePath = "/GetEconomyStores"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetEconomyStoresResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Store Items by ID
     
     - parameter storeID: (query) Unqiue identifier for the store which is being requested. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getStoreItemsByID(storeID: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetStoreItemsByIDResult?, _ error: Error?) -> Void)) -> RequestTask {
        return getStoreItemsByIDWithRequestBuilder(storeID: storeID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Store Items by ID
     - GET /GetStoreItemsByID
     - Retrieves the set of items defined for the specified store, including all prices defined
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter storeID: (query) Unqiue identifier for the store which is being requested. 
     - returns: RequestBuilder<GetStoreItemsByIDResult> 
     */
    open class func getStoreItemsByIDWithRequestBuilder(storeID: String) -> RequestBuilder<GetStoreItemsByIDResult> {
        let localVariablePath = "/GetStoreItemsByID"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "StoreID": (wrappedValue: storeID.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetStoreItemsByIDResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Unlock Container Instance
     
     - parameter unlockContainerInstanceRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func unlockContainerInstance(unlockContainerInstanceRequest: UnlockContainerInstanceRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UnlockContainerInstanceResult?, _ error: Error?) -> Void)) -> RequestTask {
        return unlockContainerInstanceWithRequestBuilder(unlockContainerInstanceRequest: unlockContainerInstanceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Unlock Container Instance
     - POST /UnlockContainerInstance
     - Opens the specified container, with the specified key (when required), and returns the contents of the opened container. If the container (and key when relevant) are consumable (RemainingUses > 0), their RemainingUses will be decremented, consistent with the operation of ConsumeItem.
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter unlockContainerInstanceRequest: (body)  (optional)
     - returns: RequestBuilder<UnlockContainerInstanceResult> 
     */
    open class func unlockContainerInstanceWithRequestBuilder(unlockContainerInstanceRequest: UnlockContainerInstanceRequest? = nil) -> RequestBuilder<UnlockContainerInstanceResult> {
        let localVariablePath = "/UnlockContainerInstance"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: unlockContainerInstanceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UnlockContainerInstanceResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
